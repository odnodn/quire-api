swagger: '2.0'
info:
  description: >
    # Introduction

    Welcome to the reference for the Quire REST API!


    <a href="http://en.wikipedia.org/wiki/REST_API" target="_blank">REST</a> is
    a web-service protocol that lends itself to rapid development by using
    everyday HTTP and JSON technology.


    The Quire REST API provides a broad set of operations and resources that:

      * Consistently doing repetitive or tedious tasks.
      * Chaining a process together by responding to changes.
      * Pulling information from other locations like email or Evernote into Quire.
      * Customizing Asana for your teamâ€™s processes and workflows.

    Want to share your opinion on how our API works for you? <a
    href="https://quire.io/w/Quire_Feedbacks" target="_blank">Tell us how you
    feel </a>about using our API and what we can do to make it better.


    # API Changelog

    You can find the <a href="https://github.com/quire-api/quire-api"
    target="_blank">Changelog</a> of the API Reference in the Quire Community.


    # Authentication


    ## OAuth v2.0


    Quire recommends that you use OAuth v2.0 to authenticate to the Quire REST
    API. 


    Quire recommends you to create a dedicated API user with API write access on
    a tenant when authenticating via OAuth, and then create an OAuth client for
    this user. See <a
    href="https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users/Create_an_API_User"
    target="_blank">Create an API User</a> for how to do this. By creating a
    dedicated API user, you can control permissions of the API user without
    affecting other non-API users.


    If a user is deactivated, all of the user's OAuth clients will be
    automatically deactivated.


    Authenticating via OAuth requires the following steps:

    1. Create a Client

    2. Generate a Token

    3. Make Authenticated Requests


    ### Create a Client


    You must first [create an OAuth
    client](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users#Create_an_OAuth_Client_for_a_User)
    in the Zuora UI. To do this, you must be an administrator of your Zuora
    tenant. This is a one-time operation. You will be provided with a Client ID
    and a Client Secret. Please note this information down, as it will be
    required for the next step.


    **Note:** The OAuth client will be owned by a Zuora user account. If you
    want to perform PUT, POST, or DELETE operations using the OAuth client, the
    owner of the OAuth client must have a Platform role that includes the "\API
    Write Access" permission.


    ### Generate a Token


    After creating a client, you must make a call to obtain a bearer token using
    the [Generate an OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    operation. This operation requires the following parameters:

    - `client_id` - the Client ID displayed when you created the OAuth client in
    the previous step

    - `client_secret` - the Client Secret displayed when you created the OAuth
    client in the previous step

    - `grant_type` - must be set to `client_credentials`


    **Note**: The Client ID and Client Secret mentioned above were displayed
    when you created the OAuth Client in the prior step. The [Generate an OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    response specifies how long the bearer token is valid for. Call [Generate an
    OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    again to generate a new bearer token.


    ### Make Authenticated Requests


    To authenticate subsequent API requests, you must provide a valid bearer
    token in an HTTP header:


    `Authorization: Bearer {bearer_token}`


    If you have [Zuora
    Multi-entity](https://www.zuora.com/developer/api-reference/#tag/Entities)
    enabled, you need to set an additional header to specify the ID of the
    entity that you want to access. You can use the `scope` field in the
    [Generate an OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    response to determine whether you need to specify an entity ID.


    If the `scope` field contains more than one entity ID, you must specify the
    ID of the entity that you want to access. For example, if the `scope` field
    contains `entity.1a2b7a37-3e7d-4cb3-b0e2-883de9e766cc` and
    `entity.c92ed977-510c-4c48-9b51-8d5e848671e9`, specify one of the following
    headers:

    - `Zuora-Entity-Ids: 1a2b7a37-3e7d-4cb3-b0e2-883de9e766cc`

    - `Zuora-Entity-Ids: c92ed977-510c-4c48-9b51-8d5e848671e9`


    **Note**: For a limited period of time, Zuora will accept the `entityId`
    header as an alternative to the `Zuora-Entity-Ids` header. If you choose to
    set the `entityId` header, you must remove all "-" characters from the
    entity ID in the `scope` field.


    If the `scope` field contains a single entity ID, you do not need to specify
    an entity ID.


    ## Concurrent Request Limits


    Quire enforces tenant-level concurrent request limits. See <a
    href="https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Policies/Concurrent_Request_Limits"
    target="_blank">Concurrent Request Limits</a> for more information.


    ## Timeout Limit


    If a request does not complete within 120 seconds, the request times out and
    Quire returns a Gateway Timeout error.
  version: 1.0.0
  title: Quire
  termsOfService: 'https://quire.io/terms'
  contact:
    name: Quire
    url: 'https://quire.io'
    email: info@quire.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
  x-logo:
    url: 'https://quire.io/b820/s/img/website/quire_logo.svg'
host: quire.io
basePath: /api
tags:
  - name: organizations
    description: An organization represents a prioritized list of projects in Quire.
  - name: projects
    description: >-
      A project represents a prioritized list of tasks in Quire. It exists in a
      single organization and is accessible to a subset of users in that
      organization, depending on its permissions.
  - name: tasks
    description: >-
      The task is the basic object around which many operations in Quire are
      centered. In the Quire application, multiple tasks populate the middle
      pane according to some view parameters, and the set of selected tasks
      determines the more detailed information presented in the details pane.
schemes:
  - https
paths:
  /organizations:
    get:
      tags:
        - organizations
      summary: Get all organizations
      description: Returns the compact organization records for all organizations
      operationId: getOrganizations
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Organization'
            example:
              - id: Develop_group
                name: Develop group
                image: 'https://quire.s3.amazonaws.com/oid1/image.jpg'
                initials: DG
                iconColor: '#a9cb77'
                projects:
                  - id: Marketing_Project
                    name: Marketing Project
                    image: 'https://quire.s3.amazonaws.com/oid3/image.jpg'
                    initials: MP
                    iconColor: '#a8bf58'
              - id: Testing_group
                name: Testing group
                image: 'https://quire.s3.amazonaws.com/oid2/image.jpg'
                initials: TG
                iconColor: '#b3cb60'
                projects: []
    post:
      tags:
        - organizations
      summary: Create an organization.
      description: Creates a new organization.
      operationId: createOrganization
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Organization to create
          required: true
          schema:
            $ref: '#/definitions/CreateOrganizationBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
  '/organizations/{id}':
    get:
      tags:
        - organizations
      summary: Get an organization
      description: returns the complete organization record.
      operationId: getOrganization
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of organization that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
        '400':
          description: Invalid ID supplied
        '404':
          description: Organization not found
    put:
      tags:
        - organizations
      summary: Update an organization
      description: >-
        A specific, existing organization can be updated by making a PUT request
        on the URL for that organization.

        Returns the complete updated organization record.
      operationId: updateOrganization
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of organization that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Organization to update
          required: true
          schema:
            $ref: '#/definitions/UpdateOrganizationBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allow
        '404':
          description: Organization not found
    delete:
      tags:
        - organizations
      summary: Delete an organization
      description: >-
        A specific, existing organization can be deleted by making a DELETE
        request on the URL for that organization.
      operationId: deleteOrganization
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of organization that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allow
        '404':
          description: Organization not found
  /projects:
    post:
      tags:
        - projects
      summary: Create a project.
      description: Creates a new project in an organization.
      operationId: createProject
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Project to create
          required: true
          schema:
            $ref: '#/definitions/CreateProjectBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allow
  '/projects/{id}':
    get:
      tags:
        - projects
      summary: Get a project
      description: returns the complete project record for a single project.
      operationId: getProject
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of project that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
    put:
      tags:
        - projects
      summary: Update a project
      description: >-
        A specific, existing project can be updated by making a PUT request on
        the URL for that project.

        Returns the complete updated project record.
      operationId: updateProject
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of project that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Project to update
          required: true
          schema:
            $ref: '#/definitions/UpdateProjectBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allow
        '404':
          description: Project not found
    delete:
      tags:
        - projects
      summary: Delete a project
      description: >-
        A specific, existing project can be deleted by making a DELETE request
        on the URL for that project.
      operationId: deleteProject
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of project that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
        '400':
          description: Invalid ID supplied
        '403':
          description: Not allow
        '404':
          description: Project not found
  '/projects/{id}/tasks':
    get:
      tags:
        - projects
      summary: Get project tasks
      description: Returns the compact task records for all tasks within the given project
      operationId: getTasks
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the project in which to search for tasks
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
  '/tasks/{id}':
    get:
      tags:
        - tasks
      summary: Show a task.
      description: Returns the complete task record for a single task.
      operationId: getTask
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of task that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
securityDefinitions:
  api_key:
    type: apiKey
    name: access_token
    in: header
  quire_auth:
    type: oauth2
    authorizationUrl: 'https://quire.io/oauth/authorize'
    flow: accessCode
    scopes:
      'write:projects': modify projects in your account
      'read:projects': read your projects
      basic: to read a user's profile info and media (granted by default)
      comments: to post and delete comments on a user's behalf
definitions:
  CreateOrganizationBody:
    type: object
    properties:
      name:
        type: string
        example: New Organization
  CreateProjectBody:
    type: object
    properties:
      name:
        type: string
        example: New Project
      organization:
        type: string
        example: Develop_group
  Organization:
    type: object
    properties:
      name:
        type: string
        example: Develop group
      id:
        type: string
        example: Develop_group
      projects:
        type: array
        items:
          $ref: '#/definitions/Project'
      iconColor:
        type: string
        example: '#a9cb77'
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
      initials:
        type: string
        example: DG
  Project:
    type: object
    properties:
      name:
        type: string
        example: Marketing Project
      id:
        type: string
        example: Marketing_Project
      iconColor:
        type: string
        example: '#a9cb77'
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
      initials:
        type: string
        example: MP
  Task:
    type: object
    properties:
      name:
        type: string
        example: Design new logo
      id:
        type: string
        example: '12'
  UpdateOrganizationBody:
    type: object
    properties:
      name:
        type: string
        example: New name of organization
      id:
        type: string
        example: myId
  UpdateProjectBody:
    type: object
    properties:
      name:
        type: string
        example: New name of project
      id:
        type: string
        example: myId
