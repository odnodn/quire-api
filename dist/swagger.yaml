swagger: '2.0'
info:
  description: >
    # Introduction

    Welcome to the reference for the Quire REST API!


    <a href="http://en.wikipedia.org/wiki/REST_API" target="_blank">REST</a> is
    a web-service protocol that lends itself to rapid development by using
    everyday HTTP and JSON technology.


    The Quire REST API provides a broad set of operations and resources that:

      * Consistently doing repetitive or tedious tasks.
      * Chaining a process together by responding to changes.
      * Pulling information from other locations like email or Evernote into Quire.
      * Customizing Asana for your teamâ€™s processes and workflows.

    Want to share your opinion on how our API works for you? <a
    href="https://quire.io/w/Quire_Feedbacks" target="_blank">Tell us how you
    feel </a>about using our API and what we can do to make it better.


    # API Changelog

    You can find the <a href="https://github.com/quire-api/quire-api"
    target="_blank">Changelog</a> of the API Reference in the Quire Community.


    # Authentication


    ## OAuth v2.0


    Quire recommends that you use OAuth v2.0 to authenticate to the Quire REST
    API. 


    Quire recommends you to create a dedicated API user with API write access on
    a tenant when authenticating via OAuth, and then create an OAuth client for
    this user. See <a
    href="https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users/Create_an_API_User"
    target="_blank">Create an API User</a> for how to do this. By creating a
    dedicated API user, you can control permissions of the API user without
    affecting other non-API users.


    If a user is deactivated, all of the user's OAuth clients will be
    automatically deactivated.


    Authenticating via OAuth requires the following steps:

    1. Create a Client

    2. Generate a Token

    3. Make Authenticated Requests


    ### Create a Client


    You must first [create an OAuth
    client](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users#Create_an_OAuth_Client_for_a_User)
    in the Zuora UI. To do this, you must be an administrator of your Zuora
    tenant. This is a one-time operation. You will be provided with a Client ID
    and a Client Secret. Please note this information down, as it will be
    required for the next step.


    **Note:** The OAuth client will be owned by a Zuora user account. If you
    want to perform PUT, POST, or DELETE operations using the OAuth client, the
    owner of the OAuth client must have a Platform role that includes the "\API
    Write Access" permission.


    ### Generate a Token


    After creating a client, you must make a call to obtain a bearer token using
    the [Generate an OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    operation. This operation requires the following parameters:

    - `client_id` - the Client ID displayed when you created the OAuth client in
    the previous step

    - `client_secret` - the Client Secret displayed when you created the OAuth
    client in the previous step

    - `grant_type` - must be set to `client_credentials`


    **Note**: The Client ID and Client Secret mentioned above were displayed
    when you created the OAuth Client in the prior step. The [Generate an OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    response specifies how long the bearer token is valid for. Call [Generate an
    OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    again to generate a new bearer token.


    ### Make Authenticated Requests


    To authenticate subsequent API requests, you must provide a valid bearer
    token in an HTTP header:


    `Authorization: Bearer {bearer_token}`


    If you have [Zuora
    Multi-entity](https://www.zuora.com/developer/api-reference/#tag/Entities)
    enabled, you need to set an additional header to specify the ID of the
    entity that you want to access. You can use the `scope` field in the
    [Generate an OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    response to determine whether you need to specify an entity ID.


    If the `scope` field contains more than one entity ID, you must specify the
    ID of the entity that you want to access. For example, if the `scope` field
    contains `entity.1a2b7a37-3e7d-4cb3-b0e2-883de9e766cc` and
    `entity.c92ed977-510c-4c48-9b51-8d5e848671e9`, specify one of the following
    headers:

    - `Zuora-Entity-Ids: 1a2b7a37-3e7d-4cb3-b0e2-883de9e766cc`

    - `Zuora-Entity-Ids: c92ed977-510c-4c48-9b51-8d5e848671e9`


    **Note**: For a limited period of time, Zuora will accept the `entityId`
    header as an alternative to the `Zuora-Entity-Ids` header. If you choose to
    set the `entityId` header, you must remove all "-" characters from the
    entity ID in the `scope` field.


    If the `scope` field contains a single entity ID, you do not need to specify
    an entity ID.


    ## Concurrent Request Limits


    Quire enforces tenant-level concurrent request limits. See <a
    href="https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Policies/Concurrent_Request_Limits"
    target="_blank">Concurrent Request Limits</a> for more information.


    ## Timeout Limit


    If a request does not complete within 120 seconds, the request times out and
    Quire returns a Gateway Timeout error.
  version: 1.0.0
  title: Quire
  termsOfService: 'https://quire.io/terms'
  contact:
    name: Quire
    url: 'https://quire.io'
    email: info@quire.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
  x-logo:
    url: 'https://quire.io/b820/s/img/website/quire_logo.svg'
host: quire.io
basePath: /api
tags:
  - name: comments
    description: The comment belong to a task or project
  - name: organizations
    description: An organization represents a prioritized list of projects in Quire.
  - name: projects
    description: >-
      A project represents a prioritized list of tasks in Quire. It exists in a
      single organization and is accessible to a subset of users in that
      organization, depending on its permissions.
  - name: tasks
    description: >-
      The task is the basic object around which many operations in Quire are
      centered. In the Quire application, multiple tasks populate the middle
      pane according to some view parameters, and the set of selected tasks
      determines the more detailed information presented in the details pane.
schemes:
  - https
paths:
  '/comments/{oid}':
    put:
      tags:
        - comments
      summary: Update a comment
      description: >-
        A specific, existing comment can be updated by making a PUT request on
        the URL for that comment.

        Returns the complete updated comment record.
      operationId: updateComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of comment that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Comemnt to update
          required: true
          schema:
            $ref: '#/definitions/UpdateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Comment not found
          examples:
            application/json:
              message: 'Comment not found: Marketing_Project'
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - comments
      summary: Delete a comment
      description: >-
        A specific, existing comment can be deleted by making a DELETE request
        on the URL for that comment.
      operationId: deleteComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of comment that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
          examples:
            application/json:
              Success: 'true'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Comment not found
          examples:
            application/json:
              message: Comment not found
          schema:
            $ref: '#/definitions/ErrorResponse'
  /organizations:
    get:
      tags:
        - organizations
      summary: Get all organizations
      description: Returns the compact organization records for all organizations
      operationId: getOrganizations
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/OrganizationWithProjects'
            example:
              - id: Develop_group
                name: Develop group
                image: 'https://quire.s3.amazonaws.com/oid1/image.jpg'
                initials: DG
                iconColor: '#a9cb77'
                projects:
                  - id: Marketing_Project
                    name: Marketing Project
                    image: 'https://quire.s3.amazonaws.com/oid3/image.jpg'
                    initials: MP
                    iconColor: '#a8bf58'
              - id: Testing_group
                name: Testing group
                image: 'https://quire.s3.amazonaws.com/oid2/image.jpg'
                initials: TG
                iconColor: '#b3cb60'
                projects: []
    post:
      tags:
        - organizations
      summary: Create an organization
      description: Creates a new organization.
      operationId: createOrganization
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Organization to create
          required: true
          schema:
            $ref: '#/definitions/CreateOrganizationBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
  /organizations/search:
    get:
      tags:
        - organizations
      summary: Search organizations
      description: Returns the compact organization records for query organizations
      operationId: searchOrganizations
      produces:
        - application/json
      parameters:
        - name: query
          in: query
          description: Query text for search organization
          required: true
          type: string
          x-example: query=my organization
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Organization'
  '/organizations/{id}':
    get:
      tags:
        - organizations
      summary: Get an organization
      description: returns the complete organization record.
      operationId: getOrganization
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of organization that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Organization not found
          examples:
            application/json:
              message: 'Organization not found: Develop_group'
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - organizations
      summary: Update an organization
      description: >-
        A specific, existing organization can be updated by making a PUT request
        on the URL for that organization.

        Returns the complete updated organization record.
      operationId: updateOrganization
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of organization that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Organization to update
          required: true
          schema:
            $ref: '#/definitions/UpdateOrganizationBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Organization not found
          examples:
            application/json:
              message: 'Organization not found: Develop_group'
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - organizations
      summary: Delete an organization
      description: >-
        A specific, existing organization can be deleted by making a DELETE
        request on the URL for that organization.
      operationId: deleteOrganization
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of organization that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
          examples:
            application/json:
              Success: 'true'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Organization not found
          examples:
            application/json:
              message: 'Organization not found: Develop_group'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /projects:
    post:
      tags:
        - projects
      summary: Create a project
      description: Creates a new project in an organization.
      operationId: createProject
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Project to create
          required: true
          schema:
            $ref: '#/definitions/CreateProjectBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
  /projects/search:
    get:
      tags:
        - projects
      summary: Search projects
      description: Returns the compact project records for query projects
      operationId: searchProjects
      produces:
        - application/json
      parameters:
        - name: query
          in: query
          description: Query text for search project
          required: true
          type: string
          x-example: query=my project
        - name: state
          in: query
          description: State of project
          required: false
          type: string
          default: active
          x-example: state=all
          enum:
            - all
            - active
            - archived
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  '/projects/{id}':
    get:
      tags:
        - projects
      summary: Get a project
      description: returns the complete project record for a single project.
      operationId: getProject
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of project that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Project not found
          examples:
            application/json:
              message: 'Project not found: Marketing_Project'
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - projects
      summary: Update a project
      description: >-
        A specific, existing project can be updated by making a PUT request on
        the URL for that project.

        Returns the complete updated project record.
      operationId: updateProject
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of project that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Project to update
          required: true
          schema:
            $ref: '#/definitions/UpdateProjectBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Project not found
          examples:
            application/json:
              message: 'Project not found: Marketing_Project'
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - projects
      summary: Delete a project
      description: >-
        A specific, existing project can be deleted by making a DELETE request
        on the URL for that project.
      operationId: deleteProject
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of project that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
          examples:
            application/json:
              Success: 'true'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Project not found
          examples:
            application/json:
              message: 'Project not found: Marketing_Project'
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/projects/{id}/comments':
    get:
      tags:
        - projects
      summary: Get project comments
      description: Returns the complete comment record for a single project.
      operationId: getProjectComments
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of project that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Task not found
          examples:
            application/json:
              message: 'Project not found: Marketing_Project'
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - projects
      summary: Add a project comment
      description: Add a new comment in a project.
      operationId: createProjectComment
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Comment to create
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
  /tasks:
    post:
      tags:
        - tasks
      summary: Add a task
      description: Add a new task in a project.
      operationId: createTask
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/tasks/{projectId}':
    get:
      tags:
        - tasks
      summary: Get project tasks
      description: Returns the compact task records for all tasks within the given project
      operationId: getTasks
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project in which to search for tasks
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskWithChildren'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Project not found
          examples:
            application/json:
              message: 'Project not found: Marketing_Project'
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/tasks/{projectId}/search':
    get:
      tags:
        - tasks
      summary: Search tasks
      description: Returns the compact task records for query tasks
      operationId: searchTasks
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project in which to search for tasks
          required: true
          type: string
        - name: query
          in: query
          description: Query text for search tasks
          required: false
          type: string
          x-example: query=my task
        - name: state
          in: query
          description: State of task
          required: false
          type: string
          default: active
          x-example: state=completed
          enum:
            - all
            - active
            - completed
        - name: assignees.all
          in: query
          description: Tasks include all assignee
          required: false
          type: array
          items:
            type: string
            example: 'assignees.all=mary@gmail.com,john'
          collectionFormat: multi
          x-example: 'assignees.all=mary@gmail.com,john'
        - name: assignees.any
          in: query
          description: Tasks contains any of assignees
          required: false
          type: array
          items:
            type: string
            example: assignees.any=john
          collectionFormat: multi
          x-example: assignees.any=john
        - name: assignees.not
          in: query
          description: Tasks not contains any of assignees
          required: false
          type: array
          items:
            type: string
            example: assignees.not=mary@gmail.com
          collectionFormat: multi
          x-example: assignees.not=mary@gmail.com
        - name: tags.all
          in: query
          description: Tasks include all tags
          required: false
          type: array
          items:
            type: string
            example: 'tags.all=yellow,red'
          collectionFormat: multi
          x-example: 'tags.all=yellow,red'
        - name: tags.any
          in: query
          description: Tasks contains any of tags
          required: false
          type: array
          items:
            type: string
            example: 'tags.any=yellow,red'
          collectionFormat: multi
          x-example: 'tags.any=yellow,red'
        - name: tags.not
          in: query
          description: Tasks not contains any of tags
          required: false
          type: array
          items:
            type: string
            example: 'tags.not=black,grey'
          collectionFormat: multi
          x-example: 'tags.not=black,grey'
        - name: due
          in: query
          description: Tasks on due
          required: false
          type: string
          x-example: due=2018-12-05
        - name: due.before
          in: query
          description: Tasks before due
          required: false
          type: string
          x-example: due.before=2018-11-05
        - name: due.after
          in: query
          description: Tasks after due
          required: false
          type: string
          x-example: due.after=2018-12-15
        - name: start
          in: query
          description: Tasks on start
          required: false
          type: string
          x-example: start=2018-12-05
        - name: start.before
          in: query
          description: Tasks before start
          required: false
          type: string
          x-example: start.before=2018-11-05
        - name: start.after
          in: query
          description: Tasks after start
          required: false
          type: string
          x-example: start.after=2018-12-15
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  '/tasks/{projectId}/{id}':
    get:
      tags:
        - tasks
      summary: Show a task.
      description: Returns the complete task record for a single task.
      operationId: getTask
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          type: string
        - name: id
          in: path
          description: ID of task that needs to be fetched
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Task not found
          examples:
            application/json:
              message: 'Task not found: 12'
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - tasks
      summary: Update a task
      description: >-
        A specific, existing task can be updated by making a PUT request on the
        URL for that taks.

        Returns the complete updated task record.
      operationId: updateTask
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          type: string
        - name: id
          in: path
          description: ID of project that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Task to update
          required: true
          schema:
            $ref: '#/definitions/UpdateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Task not found
          examples:
            application/json:
              message: 'Task not found: 12'
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - tasks
      summary: Delete a task
      description: >-
        A specific, existing task can be deleted by making a DELETE request on
        the URL for that task.
      operationId: deleteTask
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          type: string
        - name: id
          in: path
          description: ID of task that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
          examples:
            application/json:
              Success: 'true'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Task not found
          examples:
            application/json:
              message: 'Task not found: 12'
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/tasks/{projectId}/{id}/comments':
    get:
      tags:
        - tasks
      summary: Get task comments.
      description: Returns the complete comment record for a single task.
      operationId: getTaskComments
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          type: string
        - name: id
          in: path
          description: ID of task that needs to be fetched
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Task not found
          examples:
            application/json:
              message: 'Task not found: 12'
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - tasks
      summary: Add a task comment
      description: Add a new comment in a task.
      operationId: createTaskComment
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Comment to create
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
        '400':
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Not allow
          schema:
            $ref: '#/definitions/ErrorResponse'
securityDefinitions:
  api_key:
    type: apiKey
    name: access_token
    in: header
  quire_auth:
    type: oauth2
    authorizationUrl: 'https://quire.io/oauth/authorize'
    flow: accessCode
    scopes:
      'write:projects': modify projects in your account
      'read:projects': read your projects
      basic: to read a user's profile info and media (granted by default)
      comments: to post and delete comments on a user's behalf
definitions:
  Comment:
    type: object
    properties:
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      createdBy:
        $ref: '#/definitions/User'
      description:
        type: string
        example: Adjust style
      pinned:
        type: boolean
        example: false
  CreateCommentBody:
    type: object
    required:
      - text
    properties:
      text:
        type: string
        example: Adjust style
  CreateOrganizationBody:
    type: object
    properties:
      name:
        type: string
        example: New Organization
  CreateProjectBody:
    type: object
    properties:
      name:
        type: string
        example: New Project
      organization:
        type: string
        example: Develop_group
  CreateTaskBody:
    type: object
    required:
      - project
    properties:
      name:
        type: string
        example: New Task
      parent:
        type: string
        example: '10'
        description: (optional) The parent task id
      project:
        type: string
        example: Marketing_Project
        description: The project id
      after:
        type: string
        example: '13'
        description: (optional) The previous sibling task id
      due:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      start:
        type: string
        example: '2018-12-20T02:06:58.158Z'
      assignee:
        type: string
        example: john
        description: User id to assign
  ErrorResponse:
    type: object
    required:
      - message
    properties:
      message:
        type: string
        example: Something went wrong.
        description: The error message.
    description: Represents an error.
  Organization:
    type: object
    properties:
      name:
        type: string
        example: Develop group
      id:
        type: string
        example: Develop_group
      iconColor:
        type: string
        example: '#a9cb77'
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      createdBy:
        $ref: '#/definitions/User'
      initials:
        type: string
        example: DG
  OrganizationWithProjects:
    type: object
    properties:
      projects:
        type: array
        items:
          $ref: '#/definitions/Project'
      name:
        type: string
        example: Develop group
      id:
        type: string
        example: Develop_group
      iconColor:
        type: string
        example: '#a9cb77'
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      createdBy:
        $ref: '#/definitions/User'
      initials:
        type: string
        example: DG
  Project:
    type: object
    properties:
      name:
        type: string
        example: Marketing Project
      id:
        type: string
        example: Marketing_Project
      iconColor:
        type: string
        example: '#a9cb77'
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      createdBy:
        $ref: '#/definitions/User'
      initials:
        type: string
        example: MP
  Tag:
    type: object
    properties:
      name:
        type: string
        example: Later
      color:
        type: string
        example: '#a9cb77'
      oid:
        type: string
        example: zlneHUB0KueiHY
  Task:
    type: object
    properties:
      name:
        type: string
        example: Design new logo
      id:
        type: integer
        format: int32
        example: 12
      state:
        type: integer
        format: int32
        example: 0
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      createdBy:
        $ref: '#/definitions/User'
      description:
        type: string
        example: Detail about this task
      assignees:
        type: array
        items:
          $ref: '#/definitions/User'
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      due:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      start:
        type: string
        example: '2018-12-20T02:06:58.158Z'
  TaskWithChildren:
    type: object
    properties:
      tasks:
        type: array
        items:
          $ref: '#/definitions/TaskWithChildren'
      name:
        type: string
        example: Design new logo
      id:
        type: integer
        format: int32
        example: 12
      state:
        type: integer
        format: int32
        example: 0
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      createdBy:
        $ref: '#/definitions/User'
      description:
        type: string
        example: Detail about this task
      assignees:
        type: array
        items:
          $ref: '#/definitions/User'
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      due:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      start:
        type: string
        example: '2018-12-20T02:06:58.158Z'
  UpdateCommentBody:
    type: object
    required:
      - text
    properties:
      text:
        type: string
        example: Adjust style
      pinned:
        type: boolean
        example: false
  UpdateOrganizationBody:
    type: object
    properties:
      name:
        type: string
        example: New name of organization
      id:
        type: string
        example: myId
  UpdateProjectBody:
    type: object
    properties:
      name:
        type: string
        example: New name of project
      id:
        type: string
        example: myId
  UpdateTaskBody:
    type: object
    properties:
      name:
        type: string
        example: New name of task
      description:
        type: string
        example: Detail about this task
      due:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      start:
        type: string
        example: '2018-12-20T02:06:58.158Z'
      assignee:
        type: string
        example: john
  User:
    type: object
    properties:
      name:
        type: string
        example: John
      id:
        type: string
        example: john
      iconColor:
        type: string
        example: '#a9cb77'
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
      initials:
        type: string
        example: J
