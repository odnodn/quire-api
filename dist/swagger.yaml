swagger: '2.0'
info:
  description: >-
    # Introduction

    Welcome to the reference for the Quire REST API!


    <a href="http://en.wikipedia.org/wiki/REST_API" target="_blank">REST</a> is
    a web-service protocol that lends itself to rapid development by using
    everyday HTTP and JSON technology.


    The Quire REST API provides a broad set of operations and resources that:

      * Consistently doing repetitive or tedious tasks.
      * Chaining a process together by responding to changes.
      * Pulling information from other locations like email or Evernote into Quire.
      * Customizing Asana for your teamâ€™s processes and workflows.

    Want to share your opinion on how our API works for you? <a
    href="https://quire.io/w/Quire_Feedbacks" target="_blank">Tell us how you
    feel </a>about using our API and what we can do to make it better.


    # API Changelog

    You can find the <a href="https://github.com/quire-api/quire-api"
    target="_blank">Changelog</a> of the API Reference in the Quire Community.


    # Authentication

    ## OAuth v2.0


    Quire recommends that you use OAuth v2.0 to authenticate to the Quire REST
    API. 


    Quire recommends you to create a dedicated API user with API write access on
    a tenant when authenticating via OAuth, and then create an OAuth client for
    this user. See <a
    href="https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users/Create_an_API_User"
    target="_blank">Create an API User</a> for how to do this. By creating a
    dedicated API user, you can control permissions of the API user without
    affecting other non-API users.


    If a user is deactivated, all of the user's OAuth clients will be
    automatically deactivated.


    Authenticating via OAuth requires the following steps:

    1. Create a Client

    2. Generate a Token

    3. Make Authenticated Requests


    ### Create a Client


    You must first [create an OAuth
    client](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users#Create_an_OAuth_Client_for_a_User)
    in the Zuora UI. To do this, you must be an administrator of your Zuora
    tenant. This is a one-time operation. You will be provided with a Client ID
    and a Client Secret. Please note this information down, as it will be
    required for the next step.


    **Note:** The OAuth client will be owned by a Zuora user account. If you
    want to perform PUT, POST, or DELETE operations using the OAuth client, the
    owner of the OAuth client must have a Platform role that includes the "\API
    Write Access" permission.


    ### Generate a Token


    After creating a client, you must make a call to obtain a bearer token using
    the [Generate an OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    operation. This operation requires the following parameters:

    - `client_id` - the Client ID displayed when you created the OAuth client in
    the previous step

    - `client_secret` - the Client Secret displayed when you created the OAuth
    client in the previous step

    - `grant_type` - must be set to `client_credentials`


    **Note**: The Client ID and Client Secret mentioned above were displayed
    when you created the OAuth Client in the prior step. The [Generate an OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    response specifies how long the bearer token is valid for. Call [Generate an
    OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    again to generate a new bearer token.


    ### Make Authenticated Requests


    To authenticate subsequent API requests, you must provide a valid bearer
    token in an HTTP header:


    `Authorization: Bearer {bearer_token}`


    If you have [Zuora
    Multi-entity](https://www.zuora.com/developer/api-reference/#tag/Entities)
    enabled, you need to set an additional header to specify the ID of the
    entity that you want to access. You can use the `scope` field in the
    [Generate an OAuth
    token](https://www.zuora.com/developer/api-reference/#operation/createToken)
    response to determine whether you need to specify an entity ID.


    If the `scope` field contains more than one entity ID, you must specify the
    ID of the entity that you want to access. For example, if the `scope` field
    contains `entity.1a2b7a37-3e7d-4cb3-b0e2-883de9e766cc` and
    `entity.c92ed977-510c-4c48-9b51-8d5e848671e9`, specify one of the following
    headers:

    - `Zuora-Entity-Ids: 1a2b7a37-3e7d-4cb3-b0e2-883de9e766cc`

    - `Zuora-Entity-Ids: c92ed977-510c-4c48-9b51-8d5e848671e9`


    **Note**: For a limited period of time, Zuora will accept the `entityId`
    header as an alternative to the `Zuora-Entity-Ids` header. If you choose to
    set the `entityId` header, you must remove all "-" characters from the
    entity ID in the `scope` field.


    If the `scope` field contains a single entity ID, you do not need to specify
    an entity ID.


    # Rate limits


    To protect the stability of the API and keep it available to all users,
    Quire enforces multiple kinds of rate limiting. 

    Requests that hit any of our rate limits will receive a `429 Too Many
    Requests` response.

    We may change these quotas or add new quotas (such as maximum requests per
    hour) in the future.


    | Plan    | Maximum requests per minute 

    |---------|-----------------------------

    | Free    | 150

    | Premium | 1500


    # Status codes


    | Code | Meaning               |
    Description                                                                                                                                  

    |------|-----------------------|--------------------------------------------------------------------------

    | 200  | Success               | Request successful

    | 400  | Bad Request           | Request parameter name or value is invalid

    | 403  | Forbidden             | Not authorized to access the resource.

    | 404  | Not Found             | Requested entity is not found.

    | 429  | Too Many Requests     | Exceeded the [rate
    limit](#section/Rate-limits) for API calls

    | 500  | Internal Server Error | Error on the internal server


    ## Error responses

    The following JSON data is returned in the response body when an error
    occurs.

    ```json

    {
      "message": "Not found"
    }

    ```
  version: 1.0.0
  title: Quire API
  termsOfService: 'https://quire.io/terms'
  contact:
    name: Quire
    url: 'https://quire.io'
    email: info@quire.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
  x-logo:
    url: 'https://quire.io/b820/s/img/website/quire_logo.svg'
host: quire.io
basePath: /api
tags:
  - name: attachments
    description: >-
      An attachment object represents any file attached to a task or project in
      Quire.
  - name: comments
    description: The comment belong to a task or project
  - name: organizations
    description: An organization represents a prioritized list of projects in Quire.
  - name: projects
    description: >-
      A project represents a prioritized list of tasks in Quire. It exists in a
      single organization and is accessible to a subset of users in that
      organization, depending on its permissions.
  - name: tags
    description: A tag is a label that can be attached to any task in Quire.
  - name: tasks
    description: >-
      The task is the basic object around which many operations in Quire are
      centered. In the Quire application, multiple tasks populate the middle
      pane according to some view parameters, and the set of selected tasks
      determines the more detailed information presented in the details pane.
  - name: users
    description: >-
      A user object represents an account in Quire that can be given access to
      various organizations, projects, and tasks.
schemes:
  - https
paths:
  '/attachments/{url}':
    delete:
      tags:
        - attachments
      summary: Delete an attachment
      description: >-
        A specific, existing attachment can be deleted by making a DELETE
        request on the URL for that attachment.
      operationId: deleteAttachment
      produces:
        - application/json
      parameters:
        - name: url
          in: path
          description: Url of attachment that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
          examples:
            application/json:
              Success: 'true'
  '/comments/{oid}':
    get:
      tags:
        - comments
      summary: Get a comment
      description: returns the complete comment record.
      operationId: getComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of comment that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
    put:
      tags:
        - comments
      summary: Update a comment
      description: >-
        A specific, existing comment can be updated by making a PUT request on
        the URL for that comment.

        Returns the complete updated comment record.
      operationId: updateComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of comment that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Comment to update
          required: true
          schema:
            $ref: '#/definitions/UpdateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
    delete:
      tags:
        - comments
      summary: Delete a comment
      description: >-
        A specific, existing comment can be deleted by making a DELETE request
        on the URL for that comment.
      operationId: deleteComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of comment that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
          examples:
            application/json:
              Success: 'true'
  /organizations:
    get:
      tags:
        - organizations
      summary: Get all organizations
      description: Returns the compact organization records for all organizations
      operationId: getOrganizations
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/OrganizationWithProjects'
            example:
              - id: Develop_group
                oid: Dyh2YkFcu9uLgLFIeN1kB4Ld
                name: Develop group
                initials: DG
                image: 'https://quire.s3.amazonaws.com/oid1/image.jpg'
                iconColor: '#a9cb77'
                createdAt: 2018-12-22T02:06:58.158Z
                createdBy: 6QMKkEPBVWETLWrXqws94ALU
                projects:
                  - id: Marketing_Project
                    oid: GAUpZARpeOjlHqEux6IdUZI1
                    name: Marketing Project
                    initials: MP
                    image: 'https://quire.s3.amazonaws.com/oid3/image.jpg'
                    iconColor: '#a8bf58'
                    createdAt: 2018-12-28T02:06:58.158Z
                    createdBy: 6QMKkEPBVWETLWrXqws94ALU
              - id: Testing_group
                oid: meEXBLRaHFiBTbQd1mJqgPIG
                name: Testing group
                initials: TG
                image: 'https://quire.s3.amazonaws.com/oid2/image.jpg'
                iconColor: '#b3cb60'
                createdAt: 2018-12-27T02:06:58.158Z
                createdBy: 6QMKkEPBVWETLWrXqws94ALU
                projects: []
    post:
      tags:
        - organizations
      summary: Create an organization
      description: Creates a new organization.
      operationId: createOrganization
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Organization to create
          required: true
          schema:
            $ref: '#/definitions/CreateOrganizationBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
          examples:
            application/json:
              - id: New_Organization
                oid: Dyh2YkFcu9uLgLFIeN1kB4Ld
                name: New Organization
                initials: 'NO'
                image: null
                iconColor: '#a9cb77'
                createdAt: 2018-12-27T12:06:58.158Z
                createdBy: 6QMKkEPBVWETLWrXqws94ALU
  '/organizations/{oid}':
    get:
      tags:
        - organizations
      summary: Get an organization
      description: returns the complete organization record.
      operationId: getOrganization
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of organization that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
    put:
      tags:
        - organizations
      summary: Update an organization
      description: >-
        A specific, existing organization can be updated by making a PUT request
        on the URL for that organization.

        Returns the complete updated organization record.
      operationId: updateOrganization
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of organization that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Organization to update
          required: true
          schema:
            $ref: '#/definitions/UpdateOrganizationBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
          examples:
            application/json:
              - id: myId
                oid: Dyh2YkFcu9uLgLFIeN1kB4Ld
                name: New name of organization
                initials: 'NO'
                image: null
                iconColor: '#a9cb77'
                createdAt: 2018-12-27T12:06:58.158Z
                createdBy: 6QMKkEPBVWETLWrXqws94ALU
    delete:
      tags:
        - organizations
      summary: Delete an organization
      description: >-
        A specific, existing organization can be deleted by making a DELETE
        request on the URL for that organization.
      operationId: deleteOrganization
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of organization that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
          examples:
            application/json:
              Success: 'true'
  /projects:
    post:
      tags:
        - projects
      summary: Create a project
      description: Creates a new project in an organization.
      operationId: createProject
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Project to create
          required: true
          schema:
            $ref: '#/definitions/CreateProjectBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
  '/projects/{oid}':
    get:
      tags:
        - projects
      summary: Get a project
      description: returns the complete project record for a single project.
      operationId: getProject
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of project that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
    put:
      tags:
        - projects
      summary: Update a project
      description: >-
        A specific, existing project can be updated by making a PUT request on
        the URL for that project.

        Returns the complete updated project record.
      operationId: updateProject
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of project that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Project to update
          required: true
          schema:
            $ref: '#/definitions/UpdateProjectBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
    delete:
      tags:
        - projects
      summary: Delete a project
      description: >-
        A specific, existing project can be deleted by making a DELETE request
        on the URL for that project.
      operationId: deleteProject
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of project that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
          examples:
            application/json:
              Success: 'true'
  '/projects/{oid}/attachments':
    get:
      tags:
        - attachments
      summary: Get project attachments
      description: Returns the complete attachment record for a single project.
      operationId: getProjectAttachments
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of project
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Attachment'
  '/projects/{oid}/comments':
    get:
      tags:
        - comments
      summary: Get project comments
      description: Returns the complete comment record for a single project.
      operationId: getProjectComments
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of project that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
    post:
      tags:
        - comments
      summary: Add a project comment
      description: Add a new comment in a project.
      operationId: createProjectComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of project that comment to
          required: true
          type: string
        - in: body
          name: body
          description: Comment to create
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
  '/projects/{oid}/tags':
    post:
      tags:
        - projects
      summary: Add a project tag
      description: Add a new tag in a project.
      operationId: createProjectTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of project
          required: true
          type: string
        - in: body
          name: body
          description: Tag to create
          required: true
          schema:
            $ref: '#/definitions/CreateTagBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
  '/projects/{oid}/tasks':
    get:
      tags:
        - projects
      summary: Get project tasks
      description: Returns the compact task records for all tasks within the given project
      operationId: getTasks
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of the project in which to search for tasks
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskWithChildren'
  '/tags/{oid}':
    get:
      tags:
        - tags
      summary: Get a tag
      description: returns the full tag record.
      operationId: getTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of tag that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
    put:
      tags:
        - tags
      summary: Update a tag
      description: >-
        A specific, existing tag can be updated by making a PUT request on the
        URL for that tag.

        Returns the complete updated tag record.
      operationId: updateTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of tag that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: User to update
          required: true
          schema:
            $ref: '#/definitions/UpdateTagBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
    delete:
      tags:
        - tags
      summary: Delete a tag
      description: >-
        A specific, existing tag can be deleted by making a DELETE request on
        the URL for that tag.
      operationId: deleteTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of tag that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
          examples:
            application/json:
              Success: 'true'
  /tasks:
    post:
      tags:
        - tasks
      summary: Add a task
      description: Add a new task in a project.
      operationId: createTask
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  '/tasks/{oid}':
    get:
      tags:
        - tasks
      summary: Show a task.
      description: Returns the complete task record for a single task.
      operationId: getTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of task that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    put:
      tags:
        - tasks
      summary: Update a task
      description: >-
        A specific, existing task can be updated by making a PUT request on the
        URL for that taks.

        Returns the complete updated task record.
      operationId: updateTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of task that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Task to update
          required: true
          schema:
            $ref: '#/definitions/UpdateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    delete:
      tags:
        - tasks
      summary: Delete a task
      description: >-
        A specific, existing task can be deleted by making a DELETE request on
        the URL for that task.
      operationId: deleteTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of task that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
          examples:
            application/json:
              Success: 'true'
  '/tasks/{oid}/attachments':
    get:
      tags:
        - attachments
      summary: Get task attachments
      description: Returns the complete attachment record for a single task.
      operationId: getTaskAttachments
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of task
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Attachment'
  '/tasks/{oid}/comments':
    get:
      tags:
        - comments
      summary: Get task comments
      description: Returns the complete comment record for a single task.
      operationId: getTaskComments
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of task that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
    post:
      tags:
        - comments
      summary: Add a task comment
      description: Add a new comment in a task.
      operationId: createTaskComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of task that comment to
          required: true
          type: string
        - in: body
          name: body
          description: Comment to create
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
  '/users/{oid}':
    get:
      tags:
        - users
      summary: Get a user
      description: returns the full user record.
      operationId: getUser
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: >-
            Oid of user that needs to be fetched, can be one of an email
            address.

            Example: "john@gmail.com","me"
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
    put:
      tags:
        - users
      summary: Update a user
      description: >-
        A specific, existing user can be updated by making a PUT request on the
        URL for that user.

        Returns the complete updated user record.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Oid of user that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: User to update
          required: true
          schema:
            $ref: '#/definitions/UpdateUserBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
securityDefinitions:
  api_key:
    type: apiKey
    name: access_token
    in: header
  quire_auth:
    type: oauth2
    authorizationUrl: 'https://quire.io/oauth/authorize'
    flow: accessCode
    scopes:
      'write:projects': modify projects in your account
      'read:projects': read your projects
      basic: to read a user's profile info and media (granted by default)
      comments: to post and delete comments on a user's behalf
definitions:
  Attachment:
    type: object
    properties:
      length:
        type: integer
        format: int32
        example: 2048
      name:
        type: string
        example: file.zip
      url:
        type: string
        example: 'https://quire.io/att/Ta/sdcQOGgeUtyaFFzb9p0IwAgi/qfqVmUtC/image.png'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
  Comment:
    type: object
    properties:
      description:
        type: string
        example: Adjust style
      oid:
        type: string
        example: tvax2wFqqiUDqiVF7YSUlQ8n
      pinned:
        type: boolean
        example: false
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
  CreateCommentBody:
    type: object
    required:
      - description
    properties:
      description:
        type: string
        example: Adjust style
  CreateOrganizationBody:
    type: object
    properties:
      name:
        type: string
        example: New Organization
  CreateProjectBody:
    type: object
    required:
      - organization
    properties:
      name:
        type: string
        example: New Project
      organization:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: The organization oid
  CreateTagBody:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Later
  CreateTaskBody:
    type: object
    required:
      - project
    properties:
      name:
        type: string
        example: New Task
      parent:
        type: string
        example: '10'
        description: (optional) The parent task id
      project:
        type: string
        example: GAUpZARpeOjlHqEux6IdUZI1
        description: The project oid
      start:
        type: string
        example: '2018-12-20T02:06:58.158Z'
      due:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      after:
        type: string
        example: '13'
        description: (optional) The previous sibling task id
      assignee:
        type: string
        example: 6QMKkEPBVWETLWrXqws94ALU
        description: User oid to assign
  Organization:
    type: object
    properties:
      name:
        type: string
        example: Develop group
      id:
        type: string
        example: Develop_group
      initials:
        type: string
        example: DG
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
      iconColor:
        type: string
        example: '#a9cb77'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
  OrganizationWithProjects:
    type: object
    properties:
      projects:
        type: array
        items:
          $ref: '#/definitions/Project'
      name:
        type: string
        example: Develop group
      id:
        type: string
        example: Develop_group
      initials:
        type: string
        example: DG
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
      iconColor:
        type: string
        example: '#a9cb77'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
  Project:
    type: object
    properties:
      name:
        type: string
        example: Marketing Project
      id:
        type: string
        example: Marketing_Project
      initials:
        type: string
        example: MP
      oid:
        type: string
        example: GAUpZARpeOjlHqEux6IdUZI1
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
      iconColor:
        type: string
        example: '#a9cb77'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
  Tag:
    type: object
    properties:
      name:
        type: string
        example: Later
      oid:
        type: string
        example: PxXtvzXGaC0wzm7uIE92g1j1
      color:
        type: string
        example: '#a9cb77'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
  Task:
    type: object
    properties:
      oid:
        type: string
        example: 7DQI5OVhLyg2eWaQ7oNvClst
      id:
        type: integer
        format: int32
        example: 12
        position: 1
      name:
        type: string
        example: Design new logo
        position: 2
      state:
        type: integer
        format: int32
        example: 0
        position: 2
      description:
        type: string
        example: Detail about this task
        position: 2
      start:
        type: string
        example: '2018-12-20T02:06:58.158Z'
        position: 2
      assignees:
        type: array
        position: 2
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
          - Job4NSW9xK6Owcke8iKj7zyH
      due:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 2
      tags:
        type: array
        position: 2
        items:
          type: string
        example:
          - X6nmx9XjEO2wKbqeB1pRT43C
          - mPAQrYU1qt8wAYAInKRlTnvl
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
  TaskWithChildren:
    type: object
    properties:
      oid:
        type: string
        example: 7DQI5OVhLyg2eWaQ7oNvClst
      id:
        type: integer
        format: int32
        example: 12
        position: 1
      name:
        type: string
        example: Design new logo
        position: 2
      state:
        type: integer
        format: int32
        example: 0
        position: 2
      description:
        type: string
        example: Detail about this task
        position: 2
      start:
        type: string
        example: '2018-12-20T02:06:58.158Z'
        position: 2
      assignees:
        type: array
        position: 2
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
          - Job4NSW9xK6Owcke8iKj7zyH
      due:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 2
      tags:
        type: array
        position: 2
        items:
          type: string
        example:
          - X6nmx9XjEO2wKbqeB1pRT43C
          - mPAQrYU1qt8wAYAInKRlTnvl
      tasks:
        type: array
        position: 8
        items:
          $ref: '#/definitions/TaskWithChildren'
        example:
          - oid: co7XeV3ZmvPUpGuS4avHfd7e
            id: '19,'
            name: Draw new logo
            state: 10
            description: Detail about this task
            tags:
              - X6nmx9XjEO2wKbqeB1pRT43C
            assignees:
              - 6QMKkEPBVWETLWrXqws94ALU
            start: null
            due: 2018-12-22T02:06:58.158Z
            tasks: []
            createdAt: 2018-12-24T02:06:58.158Z
            createdBy: Dyh2YkFcu9uLgLFIeN1kB4Ld
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
  UpdateCommentBody:
    type: object
    required:
      - description
    properties:
      description:
        type: string
        example: Adjust style
      pinned:
        type: boolean
        example: false
  UpdateOrganizationBody:
    type: object
    properties:
      name:
        type: string
        example: New name of organization
      id:
        type: string
        example: myId
  UpdateProjectBody:
    type: object
    properties:
      name:
        type: string
        example: New name of project
      id:
        type: string
        example: myId
  UpdateTagBody:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: New tag
  UpdateTaskBody:
    type: object
    properties:
      name:
        type: string
        example: New name of task
      description:
        type: string
        example: Detail about this task
      start:
        type: string
        example: '2018-12-20T02:06:58.158Z'
      due:
        type: string
        example: '2018-12-22T02:06:58.158Z'
      assignee:
        type: string
        example: john
  UpdateUserBody:
    type: object
    properties:
      name:
        type: string
        example: John
  User:
    type: object
    properties:
      name:
        type: string
        example: John
      id:
        type: string
        example: john
      email:
        type: string
        example: john@gmail.com
      initials:
        type: string
        example: J
      oid:
        type: string
        example: ZFrV7UGOI2oMIz48cV5IzvzZ
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
      iconColor:
        type: string
        example: '#a9cb77'
