swagger: '2.0'
info:
  description: "# Introduction\nWelcome to the reference for the Quire REST API!\n\nThe Quire REST API provides a broad set of operations and resources that:\n\n  * Consistently do repetitive or tedious tasks.\n  * Chain a process together for your teamâ€™s process and workflow.\n    * Pull information from other locations such as email and <a href=\"https://evernote.com/\" target=\"_blank\">Evernote</a> into Quire.\n    * Push information from Quire to other locations such as email and <a href=\"https://zapier.com/\" target=\"_blank\">Zapier</a>. \n\nWant to share your thoughts on how Quire API works for you? <a href=\"/feedback\">Tell us how you feel </a>about using our API and what we can do to make it better.\n\n> <a href=\"http://en.wikipedia.org/wiki/REST_API\" target=\"_blank\">REST</a> is a web-service protocol for rapid development by using HTTP and JSON technology.\n\n# API Changelog\n\nYou can find the <a href=\"https://github.com/quire-api/quire-api/blob/master/CHANGES.md\" target=\"_blank\">Changelog</a> of the API Reference in the Quire Community.\n\n# Authentication\n\n## OAuth v2.0\n\nQuire uses <a href=\"https://tools.ietf.org/html/rfc6749\">OAuth v2.0</a> to authenticate your app to access the Quire REST API on behalf of users without getting their password.\n\nAuthenticating via OAuth2 requires the following steps:\n\n1. Register Your Application on Quire\n2. Ask a Quire User to Grant Access to Your Application\n3. Retrieve an Access Token\n4. Make Authenticated Requests\n\n### Register Your Application on Quire\n\n*TBD*\n\n### Ask a Quire User to Grant Access to Your Application\n\nOnce registering your application, you can ask your user to grant access to your application.\n\nYour user can grant the access of an organization or a project by clicking the `Integer | Other` menu-item on the context menu, and then select your application. \n\n*Image*\n\nAfter your user clicks `Accept`, the access will be granted, and he will be redirected to the URL you specified in the `redirect_uri` parameter.\n\nAlternatively, you can prepare a link on your website to redirect your users to Quire for authorization.\n\nThe syntax of the link is as follows:\n\n`https://quire.io/oauth?client_id=your-client-ID&redirect_uri=your-redirect-uri`\n\n| Parameter Name | Description\n|------|------\n| `client_id` | Your client ID.\n| `redirect_uri` | URL to redirect user back upon completion (optional).\n| `state` | It can be any string and will be passed back upon completion (optional). \n\nOnce your user clicks the link, he will be redirected to Quire and start the same authorization flow as shown above.\n\nThe `state` parameter should be used to avoid forgery attacks by passing in a value that's unique to the user you're authenticating and checking it when authorization completes.\n\nIf the `redirect_uri` parameter is not specified, the URL defined in the app's registration will be used.\n\n### Retrieve an Access Token\n\nTo access Quire API, you need an access token. You can retrieve the token as following.\n\n1. Retrieve the access code.\n\nAs described in the previous section, your user will be redirected to the URL you specified in `redirect_uri` once he granted the access. The URL will carry an access code in the `code` parameter. You can retrieve the access code from it.\n\n2. Use the access code to retrieve the access token.\n\nTo retrieve an access token, you have to <a href=\"https://www.w3schools.com/jquery/ajax_post.asp\" target=\"_blank\">post</a> a request to `https://quire.io/oauth/token` with the following data.\n\n`client_id=your-client-ID&grant_type=authorization_code&code=your-access-code&client_secret=your-client-secret`\n\nThen, the access token will be returned in the response's body. The token should be kept carefully and permanently since you need it to access to every Quire API. \n\n### Make Authenticated Requests\n\n*TBD*\n\nIn each request, the access token must be put in the header. The header name is `Authorization` and the value is `Bearer your_token`. For example,\n\n```\nAuthorization: Bearer jdakjo23jf18axbe21z2maewmldjqma12qr912\n```\n\n### Token Expiration\n\nA refresh token might stop working for one of these reasons:\n\n* The user has revoked your app's access.\n* The refresh token has not been used for 6 months.\n\n# WebHook\n\nWhen one event on Quire is triggered, the system will send a payload to the webhook's configured URL.\n\n> A webhook is used by Quire to call an app, while Quire API is used by an app to call Quire.\n\n## Notifications\n\nA notification is the information about a update (aka., an activity). Here is an example:\n\n```\n{\n  \"type\": \"notification\",\n  \"token\": \"a-token-defined-by-you\",\n  \"data\": {\n    \"type\": 0, //activity's type\n    \"when\": \"2019-09-30T08:20:12.000Z\",\n    \"what\": {\n      \"oid\": \"YxjapXXRCOYxoaiCT4tT3OQm\", //OID of a task, project, or organization depending on type\n      \"id\": 101,\n      \"name\": \"Brand new start\"\n    },\n    \"user\": {\n      \"oid\": \"1AbDEFed2A5031BEDDweqmde\", //OID of the user\n      \"id\": \"john.doer\",\n      \"name\": \"John Doer\"\n    },\n    \"message\": \"<a href=\\\"https://quire.io/u/john.doer\\\">John Doer</a> added <a href=\\\"https://quire.io/w/MyProjects/101\\\">Brand new start</a>\",\n    \"text\": \"John Doer added Brand new start\",\n    \"url\": \"https://quire.io/w/MyProjects/101\"\n  } \n}\n```\n\n## Registration for notifications\n\nIf the app wants to receive notifications of a specific projects or tasks, it can *follow* the projects or apps by sending a `PUT` request to the URL. To add a follower, the body of the request can be:\n\n```\n{\n  \"addFollowers\": [\"app\"]\n}\n```\n\nWhere `app` is a keyword. It indicates that the app would like to add to its followers.\n\nIn additions, you can specify additional information that will be passed as part of a notification int the following syntaxes.\n\n**Syntax 1**\n\n```\n\"app|team|channel\"\n```\n\nwhere `app` is a keyword while `team` and `channel` are application specific. That is, you can pass any value to `team` and `channel`. For example,\n\n```\n{\n  \"addFollowers\": [\"app|extra101\"]\n}\n```\n\nThen, the notification will carry additional field called `team` with the value `\"extra101\"`:\n\n```\n{\n  \"type\": \"notification\"\n  \"team\": \"extra101\"\n  \"data\": {\n    //refer the Notifications section for details\n  }\n}\n```\n\n**Syntax 2**\n\n```\n\"app|/path\"\n```\n\nwhere `app` is a keyword, and `/path` is application specific. The path will be appended to the app's hook URL. For example, assume the app's hook URL is `\"https://super.app/hooks/standard\"`, and the follower \"app|/soc/id279/channel51\". Then, the notification will be posted the following URL: `\"https://super.app/hooks/standard/soc/id279/channel51\"`.\n\nIf you'd like to pass additional information in this syntax, you can append it as follows.\n\n```\n\"app|/path|channel\"\n```\n\nFor example, `app|/soc/id8|box51`. Then, `box51` will be part of the JON object sent to the hook URL.\n\n```\n{\n  \"type\": \"notification\"\n  \"channel\": \"box51\"\n  \"data\": {\n    //refer the Notifications section for details\n  }\n}\n```\n\n# Rate limits\n\nTo protect the stability of the API and keep it available to all users, Quire enforces multiple kinds of rate limiting. \nRequests that hit any of our rate limits will receive a `429 Too Many Requests` response.\nWe may change these quotas or add new quotas in the future.\n\n| Plan | Maximum requests per organization, per *minute* | Maximum requests per organization, per *hour*\n|---------|------|-------\n| Free | 20  | 800\n\n> Note: the limit is per-organization. It sums up the total number of all accesses from all applications for each organization.\n\n## Size limits\n\nThe size of each request can't be larger than 2MB. Requests that hit this limit will receive a `413 Payload too large` response.\n\n# Status codes\n\n| Code | Meaning               | Description                                               \n|------|-----------------------|--------------------------------------------------------------------------\n| 200  | Success               | Request successful\n| 400  | Bad Request           | You're using a wrong parameter, or passing incorrect data.\n| 401  | Unauthorized          | Your API key is wrong.\n| 403  | Forbidden             | Not authorized to access the resource.\n| 404  | Not Found             | The specified resource could not be found.\n| 405  | Method not Allowed    | Method not allowed or supported.\n| 409  | Conflict              | There is already a resource with the same criteria.\n| 429  | Too Many Requests     | Exceeded the [rate limit](#section/Rate-limits) for API calls\n| 500  | Internal Server Error | There is an unexpected error.\n| 503  | Service Unavailable   | Server is down for maintenance.\n\n## Error responses\n\nThe following JSON data is returned in the response body when an error occurs.\n\n```json\n{\n\t\"code\": a_number,\n  \"message\": \"an error message here\"\n}\n```\n\n| Error Code | Meaning\n|-----|-----------------------\n| 100 | General authentication error.\n| 400 | Bad request including wrong request body, wrong parameter and so on.\n| 401 | Invalid or expired token.\n| 403 | Forbidden.\n| 404 | Resource not found.\n| 405 | Method not allowed.\n| 413 | Request too large.\n| 429 | Too many invocations.\n| 469 | Quota exceeded.\n| 500 | General invocation error. Most likely, an internal error.\n"
  version: 1.0.0
  title: Quire API
  termsOfService: 'https://quire.io/terms'
  contact:
    name: Quire
    url: 'https://quire.io'
    email: info@quire.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
  x-logo:
    url: 'https://quire.io/b820/s/img/website/quire_logo.svg'
host: quire.io
basePath: /api
tags:
  - name: board
    description: >-
      A board is a group of columns that an user can visualize the progress of
      tasks.
  - name: comment
    description: A comment that an user can put to a task or project.
  - name: organization
    description: An organization is a group of projects where members collaborate at once.
  - name: partner
    description: >-
      An external team (aka., a parnter) is a group of users that can access
      only tasks that are assigned to this team.
  - name: project
    description: >-
      A project represents a prioritized list of tasks in Quire. It exists in a
      single organization and is accessible to a subset of users in that
      organization, depending on its permissions.
  - name: tag
    description: A tag is a label that can be attached to any task in Quire.
  - name: task
    description: >-
      The task is a piece of work to be done or undertaken. It is the basic
      object that you and your team can collaborate on.
  - name: user
    description: >-
      A user object represents an account in Quire that can be given access to
      various organizations, projects, and tasks.
schemes:
  - https
paths:
  '/board/id/{projectId}/{id}':
    get:
      tags:
        - board
      summary: Get an existing board by its ID.
      description: Returns the full board record of the given ID.
      operationId: getBoardById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project that the board belongs to.
          required: true
          type: integer
          format: int32
        - name: id
          in: path
          description: ID of the board that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Board'
  '/board/list/id/{projectId}':
    get:
      tags:
        - board
      summary: Get all boards of the given project by its ID.
      description: Returns all board records of the given project by its ID.
      operationId: getBoardsByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Board'
  '/board/list/{projectOid}':
    get:
      tags:
        - board
      summary: Get all boards of the given project by its OID.
      description: Returns all board records of the given project by its OID.
      operationId: getBoardsByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of the project.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Board'
  '/board/{oid}':
    get:
      tags:
        - board
      summary: Get an existing board by its OID
      description: Returns the full board record of the given OID.
      operationId: getBoard
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of board that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Board'
    put:
      tags:
        - board
      summary: Update a board.
      description: 'Updates an existing board, and returns the complete updated record.'
      operationId: updateBoard
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of board that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Board to update
          required: true
          schema:
            $ref: '#/definitions/UpdateBoardBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Board'
    delete:
      tags:
        - board
      summary: Delete a board
      description: Delete an existing board of the given OID.
      operationId: deleteBoard
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of board that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/board/{projectOid}':
    post:
      tags:
        - board
      summary: Add a new board.
      description: Add a new board into a project.
      operationId: createBoard
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of project that this new board to be added to.
          required: true
          type: string
        - in: body
          name: body
          description: Board to create
          required: true
          schema:
            $ref: '#/definitions/CreateBoardBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Board'
  '/comment/list/id/{projectId}':
    get:
      tags:
        - comment
      summary: Get all comments of the given project.
      description: Returns all comment records of the given project by its ID.
      operationId: getProjectComments
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
  '/comment/list/id/{projectId}/{taskId}':
    get:
      tags:
        - comment
      summary: 'Get all comments of the given task. '
      description: Returns all comment records of the given task by its ID.
      operationId: getTaskComments
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project.
          required: true
          type: string
        - name: taskId
          in: path
          description: ID of the task
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
  '/comment/list/{oid}':
    get:
      tags:
        - comment
      summary: Get comments added to the given object.
      description: >-
        Returns all comment records of the given object that can be a project or
        a task.
      operationId: getComments
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of project or task that comments will be be fetched from.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
  '/comment/{oid}':
    get:
      tags:
        - comment
      summary: Get a comment
      description: Returns the full comment record of the given OID.
      operationId: getComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of comment that needs to be feteched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
    post:
      tags:
        - comment
      summary: Add a task comment to a task or a project.
      description: >-
        Add a new comment to a task or a project. If the given OID is a project,
        the comment will be added to a project. If a task, the comment will be
        added to a task.
      operationId: createComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of a project or a task that new comment will be added to
          required: true
          type: string
        - in: body
          name: body
          description: Comment to create
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
    put:
      tags:
        - comment
      summary: Update an existing comment
      description: >-
        Updates an existing comment, and returns the complete updated comment
        record.
      operationId: updateComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of comment that needs to be updated.
          required: true
          type: string
        - in: body
          name: body
          description: The new content of the comment to update to
          required: true
          schema:
            $ref: '#/definitions/UpdateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
    delete:
      tags:
        - comment
      summary: Delete an existing comment
      description: Delete an existing comment.
      operationId: deleteComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of comment that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/organization/id/{id}':
    get:
      tags:
        - organization
      summary: Get an organization by its ID.
      description: Returns the complete organization record of the given OID.
      operationId: getOrganizationById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of organization that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
  /organization/list:
    get:
      tags:
        - organization
      summary: Get all organizations.
      description: >-
        Returns the organization records for all organizations that the current
        user can grant to this application.
      operationId: getOrganizations
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Organization'
  '/organization/{oid}':
    get:
      tags:
        - organization
      summary: Get an organization by its OID.
      description: returns the complete organization record.
      operationId: getOrganization
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of organization that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
  '/partner/list/id/{projectId}':
    get:
      tags:
        - partner
      summary: Get all external teams of the given project by its ID.
      description: Returns all external team records of the given project by its ID.
      operationId: getPartnersByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project to look for
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Partner'
  '/partner/list/{projectOid}':
    get:
      tags:
        - partner
      summary: Get all external teams of the given project by its OID.
      description: Returns all external team records of the given project by its OID.
      operationId: getPartnersByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of the project to look for
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Partner'
  '/partner/{oid}':
    get:
      tags:
        - partner
      summary: 'Get an external team (aka., a partner).'
      description: Returns the full external team record of the given OID.
      operationId: getPartner
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of external team that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Partner'
  '/project/id/{id}':
    get:
      tags:
        - project
      summary: Get a project by its ID.
      description: Returns the complete project record of the given ID.
      operationId: getProjectById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of project that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
  '/project/list/id/{organizationId}':
    get:
      tags:
        - project
      summary: Get all granted projects of the organization by its ID.
      description: >-
        Returns all project records of the given organization. Only granted
        projects will be returned.
      operationId: getPrjectsByOrganizationId
      produces:
        - application/json
      parameters:
        - name: organizationId
          in: path
          description: ID of the organization
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  '/project/list/{organizationOid}':
    get:
      tags:
        - project
      summary: Get all granted projects of the organization by its OID.
      description: >-
        Returns all project records of the given organization. Only granted
        projects will be returned.

        Note: the "organizationOid" is optinal. If omitted, all granted project
        records will be returned.
      operationId: getPrjectsByOrganizationOid
      produces:
        - application/json
      parameters:
        - name: organizationOid
          in: path
          description: (Optional) OID of the organization.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  '/project/{oid}':
    get:
      tags:
        - project
      summary: Get a project by its OID.
      description: Returns the complete project record of the given OID.
      operationId: getProject
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of project that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
    put:
      tags:
        - project
      summary: Update a project.
      description: >-
        Updates an existing project, and returns the complete updated project
        record.
      operationId: updateProject
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of project that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Project to update
          required: true
          schema:
            $ref: '#/definitions/UpdateProjectBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
  '/tag/list/id/{projectId}':
    get:
      tags:
        - tag
      summary: Get all tags of the given project by its ID.
      description: Returns all tag records of the given project by its ID.
      operationId: getTagsByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
  '/tag/list/{projectOid}':
    get:
      tags:
        - tag
      summary: Get all tags of the given project by its OID.
      description: Returns all tag records of the given project by its OID.
      operationId: getTagsByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of the project.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
  '/tag/{oid}':
    get:
      tags:
        - tag
      summary: Get a tag.
      description: Returns the full tag record of the given OID.
      operationId: getTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of tag that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
    put:
      tags:
        - tag
      summary: Update a tag.
      description: 'Updates an existing tag, and returns the complete updated record.'
      operationId: updateTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of tag that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Tag to update
          required: true
          schema:
            $ref: '#/definitions/UpdateTagBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
    delete:
      tags:
        - tag
      summary: Delete a tag
      description: Delete an existing tag of the given OID.
      operationId: deleteTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of tag that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/tag/{projectOid}':
    post:
      tags:
        - tag
      summary: Add a new tag.
      description: Add a new tag into a project.
      operationId: createTag
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of project that this new tag to be added to.
          required: true
          type: string
        - in: body
          name: body
          description: Tag to create
          required: true
          schema:
            $ref: '#/definitions/CreateTagBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
  '/task/after/{oid}':
    post:
      tags:
        - task
      summary: Add a new task after the given task.
      description: Add a new task after the given task.
      operationId: createTaskAfter
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: 'OID of the task that this new task to be added after. '
          required: true
          type: string
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  '/task/before/{oid}':
    post:
      tags:
        - task
      summary: Add a new task before the given task.
      description: Add a new task before the given task.
      operationId: createTaskBefore
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the task that this new task to be added before.
          required: true
          type: string
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  '/task/id/{projectId}/{id}':
    get:
      tags:
        - task
      summary: Get an existing task by its ID.
      description: Returns the full task record for a single task.
      operationId: getTaskById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project that the task belongs to.
          required: true
          type: integer
          format: int32
        - name: id
          in: path
          description: ID of the task that needs to be fetched
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  '/task/list/id/{projectId}':
    get:
      tags:
        - task
      summary: Get all root tasks of the given project.
      description: Returns all root task records of the given project.
      operationId: getRootTasks
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  '/task/list/id/{projectId}/{taskId}':
    get:
      tags:
        - task
      summary: Get all subtasks of the given task.
      description: >-
        Returns all subtask records of the given task.

        Note: tasks in the same level are return. That is, it won't returns
        subtasks of subtasks. You have to retrieve them recursively.
      operationId: getSubtasks
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project.
          required: true
          type: string
        - name: taskId
          in: path
          description: ID of the parent task.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  '/task/list/{oid}':
    get:
      tags:
        - task
      summary: >-
        Get all root tasks of the given project or all subtasks of the given
        task.
      description: >-
        Returns all root task records of the given project or all subtasks of
        the given task by OID. If the given OID is a project, the root tasks are
        returned. If the given OID is a task, its subtasks are returned.

        Note: tasks in the same level are return. That is, it won't returns
        subtasks of subtasks. You have to retrieve them recursively.
      operationId: getTasksByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of project or parent task to look for
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  '/task/search/id/{projectId}':
    get:
      tags:
        - task
      summary: Searches tasks in the given project.
      description: >-
        Returns task records that match the specified criteria in the given
        project.
      operationId: searchTasksById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project to search for the tasks.
          required: true
          type: string
        - name: name
          in: query
          description: >-
            Task name to match with.

            To specify a regular expression, you can precede it with `~`. For
            example, `name=~abc` matches if `abc` is part of the name.
            `name=~^ab.*ed$` matches if the name starts with `ab` and ends with
            `ed`.
          required: false
          type: string
          x-example: name=My first task
        - name: description
          in: query
          description: |-
            Task's description to match with.
            To specify a regular expression, you can precede it with `~`.
          required: false
          type: string
          x-example: description=~john@gooodjob.com
        - name: status
          in: query
          description: |-
            Task's status to match with.
            You can specify a value between 0 and 100.
          required: false
          type: string
          x-example: status=100
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/SimpleTask'
  '/task/search/{projectOid}':
    get:
      tags:
        - task
      summary: Searches tasks in the given project.
      description: >-
        Returns task records that match the specified criteria in the given
        project.


        Note: it returns at most 50 records, and recent edited first.
      operationId: searchTasksByOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of the project to search for the tasks.
          required: true
          type: string
        - name: name
          in: query
          description: |
            Task name to match with.
            To specify a regular expression, you can precede it with `~`.
          required: false
          type: string
          x-example: name=My first task
        - name: description
          in: query
          description: |-
            Task's description to match with.
            To specify a regular expression, you can precede it with `~`.
          required: false
          type: string
          x-example: description=~john@gooodjob.com
        - name: status
          in: query
          description: >-
            Task's status to match with.

            You can specify a value between 0 and 100, or "active" for active
            tasks, "completed" for completed tasks.
          required: false
          type: string
          x-example: status=100
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/SimpleTask'
  '/task/{oid}':
    get:
      tags:
        - task
      summary: Get an existing task by its OID.
      description: Returns the full task record for a single task.
      operationId: getTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the task that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    post:
      tags:
        - task
      summary: Add a new task.
      description: Add a new task into a project.
      operationId: createTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: >-
            OID of project or task that this new task to be added to. If the
            given OID is a project, the new task will be added as a root task.
            If the given OID is a task, the new task will become its subtask.
          required: true
          type: string
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    put:
      tags:
        - task
      summary: Update an existing task.
      description: 'Updates an existing task, and returns the full updated record.'
      operationId: updateTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of task that needs to be updated.
          required: true
          type: string
        - in: body
          name: body
          description: The new content of the task to update to.
          required: true
          schema:
            $ref: '#/definitions/UpdateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    delete:
      tags:
        - task
      summary: Delete a task and all of its subtasks.
      description: Delete an existing task and all of its subtasks.
      operationId: deleteTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of task that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/user/id/{id}':
    get:
      tags:
        - user
      summary: Get a user by its ID or email address.
      description: Returns the full user record of the given ID or email address.
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: |-
            ID, email address or "me" of user that needs to be fetched.
            Example: "john@gmail.com","me"
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
  /user/list:
    get:
      tags:
        - user
      summary: Get all user records.
      description: >-
        Returns all colleagues of the current user if he granted the app to
        access his contacts. Otherwise, it returns only colleagues who also
        authorized the same app.

        If the current user didn't grant the access of his contacts and none of
        his collegues authorized this app, only the current user's record will
        be returned.

        The first record must be the current user. 
      operationId: getUsers
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  '/user/list/project/id/{projectId}':
    get:
      tags:
        - user
      summary: Get all users records of the given project.
      description: >-
        Returns all members of the given project of the specified ID.

        If the current user doesn't grant the app to access his contacts, only
        basic information are returned.

        The first record must be the current user. 
      operationId: getUsersOfProjectByOid
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  '/user/list/project/{oid}':
    get:
      tags:
        - user
      summary: Get all users records of the given project.
      description: >-
        Returns all members of the given project of the specified OID.

        If the current user doesn't grant the app to access his contacts, only
        basic information are returned.

        The first record must be the current user. 
      operationId: getUsersOfProjectById
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  '/user/{oid}':
    get:
      tags:
        - user
      summary: Get a user by its OID.
      description: Returns the full user record of the given OID.
      operationId: getUserByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of user that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
securityDefinitions:
  BasicAuth:
    type: basic
  OAuth2:
    type: oauth2
    authorizationUrl: 'https://quire.io/oauth'
    tokenUrl: 'https://quire.io/oauth/token'
    flow: accessCode
definitions:
  AddColumnBody:
    type: object
    properties:
      before:
        type: integer
        format: int32
        description: >-
          (Optional) The value of the column that this new column needs to be
          added before. If specified, the new column will be put before the
          specified column.
      name:
        type: string
        example: TODO
        description: The name.
      color:
        type: string
        example: '35'
        description: >-
          (Optional) The color. It is an index of our predefined color palette.
          The first digit is between 0 and 5, and the second between 0 and 7.
          The color palette can be found in our Quire's color picker.
      value:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          The status that this column represents. Its value must be between 0
          and 100. If 100, it means completed. There is exactly one column with
          completed status.
  Attachment:
    type: object
    properties:
      length:
        type: integer
        format: int32
        example: 2048
        description: 'The size of this attachment. Unit: bytes.'
      name:
        type: string
        example: file.zip
        description: Attachment's name.
      type:
        type: integer
        format: int32
        example: 2048
        description: >-
          The type of this attachment.It is 1 if it is from Google Drive. It is
          2 if it is stored in Quire.
      url:
        type: string
        example: 'https://quire.io/att/Ta/sdcQOGgeUtyaFFzb9p0IwAgi/qfqVmUtC/image.png'
        description: URL of this attachment.
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the user who created this record.
  Board:
    type: object
    properties:
      id:
        type: string
        example: My_ID
        description: ID.
      url:
        type: string
        example: 'https://quire.io/w/my_project'
        description: Url of this record on Quire website.
      description:
        type: string
        example: This is *cool*!
        description: Description.
      nameText:
        type: string
        example: My Name
        description: Name but excluding markdown characters.
      nameHtml:
        type: string
        example: My Name
        description: Name in a form of a HTML fragment converted from markdown.
      descriptionText:
        type: string
        example: This is cool!
        description: Description but excluding markdown characters.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description in a form of a HTML fragment converted from markdown.
      iconColor:
        type: string
        example: '37'
        description: >-
          The color of the icon representing this record. It is an index of our
          predefined color palette. 
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        description: The image representing this record.
        allowEmptyValue: true
      name:
        type: string
        example: My Name
        description: Name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      columns:
        type: array
        position: 10
        description: The column defintions of this board.
        items:
          $ref: '#/definitions/Column'
      partner:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 15
        description: >-
          OID of the external team that this board belongs to. It is null if
          this board can't be accessed by a member of external teams.
      archivedAt:
        type: string
        example: '2020-02-22T02:06:58.158Z'
        position: 50
        description: When this board was archived. It is null if not archived.
      due:
        type: string
        example: '2020-01-22T02:06:58.158Z'
        position: 50
        description: 'When this board was aimed to complete, or null if not specified.'
      project:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the project this board belongs to.
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the user who created this record.
  Column:
    type: object
    properties:
      name:
        type: string
        example: TODO
        description: The name.
      color:
        type: string
        example: '35'
        description: >-
          The color. It is an index of our predefined color palette. The first
          digit is between 0 and 5, and the second between 0 and 7. The color
          palette can be found in our Quire's color picker.
      value:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          The status that this column represents. Its value must be between 0
          and 100. If 100, it means completed. There is exactly one column with
          completed status.
  Comment:
    type: object
    properties:
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      description:
        type: string
        example: It is *cool*!
        position: 1
        description: The content.
      descriptionText:
        type: string
        example: It is cool!
        position: 1
        description: The content but excluding markdown characters.
      descriptionHtml:
        type: string
        example: It is <i>cool</i>!
        position: 1
        description: The content in a form of a HTML fragment converted from markdown.
      attachments:
        type: array
        position: 8
        description: The attachments of this task.
        items:
          $ref: '#/definitions/Attachment'
      url:
        type: string
        example: >-
          https://quire.io/w/my_project70/Cello_and_voilin#comment-iDsPd.QP_qM.hN.Trymukn8b
        position: 50
        description: Url of this comment on Quire website.
      editedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: 'When this comment was edited, or null if not edited.'
      pinBy:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 50
        description: 'OID of the user who pinned this comment, or null if not pinned.'
      pinAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: 'When this comment was pinned, or null if not pinned.'
      editedBy:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 50
        description: 'OID of the user who edited this comment, or null if not edited.'
      owner:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the object this comment was added to.
      ownerType:
        type: string
        example: Task
        position: 99
        description: >-
          The type of the object this comment was added to. It can be "Task" or
          "Project".
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the user who created this record.
  CreateBoardBody:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Board 101
        description: The name of the board.
      id:
        type: string
        example: Board101
        description: >-
          (Optional) ID of the board. If omitted, Quire will generate one
          automatically. It must be unquie in the whole project if specified
      description:
        type: string
        example: '**Great** board to start with.'
        description: (Optional) An optional description about this task.
      columns:
        type: array
        description: >-
          (Optional) The column defintions of this board. If omitted, the
          default column defintions will be generated. If specified, it must
          have at least one column whose status is 100.
        items:
          $ref: '#/definitions/CreateColumnBody'
      partner:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 15
        description: (Optional) OID of the external team that this board belongs to.
      due:
        type: string
        example: '2020-01-22T02:06:58.158Z'
        position: 50
        description: '(Optional) When this board was aimed to complete. '
  CreateColumnBody:
    type: object
    properties:
      name:
        type: string
        example: TODO
        description: The name.
      color:
        type: string
        example: '35'
        description: >-
          (Optional) The color. It is an index of our predefined color palette.
          The first digit is between 0 and 5, and the second between 0 and 7.
          The color palette can be found in our Quire's color picker.
      value:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          The status that this column represents. Its value must be between 0
          and 100. If 100, it means completed. There is exactly one column with
          completed status.
  CreateCommentBody:
    type: object
    required:
      - description
    properties:
      description:
        type: string
        example: Adjust style
        description: The content of the new comment.
      pinned:
        type: boolean
        example: false
        description: '(Optional) Whether to pin this comment. Default: false'
      asUser:
        type: boolean
        example: true
        description: >-
          (Optional) Specify true if you'd like to make this new comment as
          created by the app.

          Default: false -- the comment is marked as created by the user
          authorizing the app.
  CreateTagBody:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Later
        description: The name of the tag
      global:
        type: boolean
        example: true
        description: '(Optional) Whether this tag is global. If omitted, it is not glboal.'
      color:
        type: string
        description: >-
          (Optional) The color of the tag.If not omitted, a color will be
          generated automatially.
  CreateTaskBody:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Task 101
        description: The name of the task.
      description:
        type: string
        example: '**Great** task to start with.'
        description: (Optional) An optional description about this task.
      tags:
        type: array
        description: (Optional) OID of the tags to be added to the new created task.
        items:
          type: string
        example:
          - X6nmx9XjEO2wKbqeB1pRT43C
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        description: >-
          (Optional) An optional start time. Note: if time is specified, the
          millisecond must be `001`. Otherwise, it is `000` (so are the hour,
          minute and second fields).
      assignees:
        type: array
        description: (Optional) OID of the users that this task is assigned to.
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        description: >-
          (Optional) An optional start time. Note: if time is specified, the
          millisecond must be `001`. Otherwise, it is `000` (so are the hour,
          minute and second fields).
      recurring:
        description: >-
          (Optional) The recurring information of this task. It is null if it is
          not a recurring task.
        $ref: '#/definitions/Recurring'
      peekaboo:
        type: boolean
        example: true
        description: >-
          (Optional) Specify true to peekaboo this task and its subtasks, if
          any. Default: false.
      asUser:
        type: boolean
        example: true
        description: >-
          (Optional) Specify true if you'd like to make this new task as created
          by the app.

          Default: false -- the task is marked as created by the user
          authorizing the app.
      followers:
        type: array
        description: >-
          (Optional) OID of users who follow this task.If "me" is specified, it
          means the current user will follow this task.

          If the application would like to follow (i.e., receive notifications),
          it can pass "app" as one of OIDs.

          In additions, it can pass additional information in one of the
          following syntaxes.


          Syntax 1:

          "app|team" or "app|team|channel"

          where team and channel can be any value.


          Syntax 2:

          "app|/path"

          where "/path" can be any URL path. It will be appended to the hook's
          URL when calling the registered hook. For example, if the hook URL is
          "https://super.app/hooks/standard" and the follower is
          "app|/soc1/33456/a7", then the notification will be sent to
          "https://super.app/hooks/standard/soc1/33456/a7".
        items:
          type: string
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          (Optiona) An optional priority. Its value must be between -1 (lowest)
          and 2 (highest). Default: 0.
      status:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          (Optiona) An optional status. Its value must be between 0 and 100.
          Default: 0.
  Organization:
    type: object
    properties:
      email:
        type: string
        example: john@gmail.cc
        description: Email address.
        allowEmptyValue: true
      website:
        type: string
        example: 'https://coolwebsites.com'
        description: Website.
        allowEmptyValue: true
      id:
        type: string
        example: My_ID
        description: ID.
      url:
        type: string
        example: 'https://quire.io/w/my_project'
        description: Url of this record on Quire website.
      description:
        type: string
        example: This is *cool*!
        description: Description.
      nameText:
        type: string
        example: My Name
        description: Name but excluding markdown characters.
      nameHtml:
        type: string
        example: My Name
        description: Name in a form of a HTML fragment converted from markdown.
      descriptionText:
        type: string
        example: This is cool!
        description: Description but excluding markdown characters.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description in a form of a HTML fragment converted from markdown.
      iconColor:
        type: string
        example: '37'
        description: >-
          The color of the icon representing this record. It is an index of our
          predefined color palette. 
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        description: The image representing this record.
        allowEmptyValue: true
      name:
        type: string
        example: My Name
        description: Name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the user who created this record.
  Partner:
    type: object
    properties:
      name:
        type: string
        example: Later
        description: The name.
      color:
        type: string
        example: '35'
        description: >-
          The color. It is an index of our predefined color palette. The first
          digit is between 0 and 5, and the second between 0 and 7. The color
          palette can be found in our Quire's color picker.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        position: 2
      project:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the project this object belongs to.
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the user who created this record.
  Project:
    type: object
    properties:
      organization:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: OID of the organization this project belongs to.
      activeCount:
        type: integer
        format: int32
        description: Number of active tasks in this project.
      taskCount:
        type: integer
        format: int32
        description: Total number of tasks in this project.
      rootCount:
        type: integer
        format: int32
        description: Number of root tasks in this project.
      id:
        type: string
        example: My_ID
        description: ID.
      url:
        type: string
        example: 'https://quire.io/w/my_project'
        description: Url of this record on Quire website.
      description:
        type: string
        example: This is *cool*!
        description: Description.
      nameText:
        type: string
        example: My Name
        description: Name but excluding markdown characters.
      nameHtml:
        type: string
        example: My Name
        description: Name in a form of a HTML fragment converted from markdown.
      descriptionText:
        type: string
        example: This is cool!
        description: Description but excluding markdown characters.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description in a form of a HTML fragment converted from markdown.
      iconColor:
        type: string
        example: '37'
        description: >-
          The color of the icon representing this record. It is an index of our
          predefined color palette. 
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        description: The image representing this record.
        allowEmptyValue: true
      name:
        type: string
        example: My Name
        description: Name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      editedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: When this record was edited last time.
      archivedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: >-
          When this project was archived (aka., peekaboo). It is null if not
          archived.
      followers:
        type: array
        position: 60
        description: OID of users who follow this task.
        items:
          type: string
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the user who created this record.
  Recurring:
    type: object
    properties:
      type:
        type: integer
        format: int32
        example: 2048
        description: >-
          The type of this recurring.It is 0 if it is weekly. It is 1 if it is
          monthly. It is 2 if it is yearly. It is 3 if it is custom. 
      data:
        type: integer
        format: int32
        description: >-
          It depends on the type of this recurring. If weekly, bit 0 is Sunday,
          bit 1 is Monday and so on. For example, if the data is 6, it means
          every Monday and Tuesday.
      rate:
        type: integer
        format: int32
        example: 2048
        description: >-
          How often this recurring shall occur. If the rate is 2 and the type is
          weekly, it means it shall occur every two week. If the type is custom,
          it means number of days to repeat.
      end:
        type: string
        example: '2020-12-22T00:00:00.000Z'
        position: 4
        description: >-
          When this recurring shall end. If not specified, it means it is never
          end.
  Referrer:
    type: object
    properties:
      task:
        type: string
        example: wrSpgghWFCzPHBqiShSurDeD
        description: OID of the task that refers another task.
      when:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        description: When this reference is made.
      user:
        type: string
        example: wrSpgghWFCzPHBqiShSurDeD
        description: OID of the user who made this reference.
  SimpleTask:
    type: object
    properties:
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      id:
        type: integer
        format: int32
        example: 12
        position: 1
      name:
        type: string
        example: Design new logo
        position: 2
        description: This task's name.
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          The priority of this task. Its value must be between -1 (lowest) and 2
          (highest). Default: 0.
      status:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          The status of this task. Its value must be between 0 and 100. If 100,
          it means completed.
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        position: 4
        description: >-
          When to start this task.Note: if time is specified, the millisecond
          will be `001`. Otherwise, it is `000` (so are the hour, minute and
          second fields).
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        position: 4
        description: >-
          When to complete this task. Note: if time is specified, the
          millisecond will be 001. Otherwise, it is 000 (so are the hour, minute
          and second fields).
      url:
        type: string
        example: 'https://quire.io/w/my_project/123'
        position: 50
        description: Url of this task on Quire website.
  Tag:
    type: object
    properties:
      global:
        type: boolean
        example: true
        description: >-
          Whether this is a global tag. Note: it won't be returned if this is
          not a global tag.
      name:
        type: string
        example: Later
        description: The name.
      color:
        type: string
        example: '35'
        description: >-
          The color. It is an index of our predefined color palette. The first
          digit is between 0 and 5, and the second between 0 and 7. The color
          palette can be found in our Quire's color picker.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      project:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the project this object belongs to.
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the user who created this record.
  Task:
    type: object
    properties:
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      id:
        type: integer
        format: int32
        example: 12
        position: 1
      name:
        type: string
        example: Design new logo
        position: 2
        description: This task's name.
      nameText:
        type: string
        position: 2
        description: This task's name but excluding markdown characters.
      nameHtml:
        type: string
        example: <b>Big</b> task
        position: 2
        description: This task's name in a form of a HTML fragment converted from markdown.
      description:
        type: string
        example: This is a **cool** task.
        position: 3
        description: Description about this task.
      descriptionText:
        type: string
        example: This is a cool task.
        position: 3
        description: Description but excluding markdown characters.
      descriptionHtml:
        type: string
        example: This is a <i>cool</i> task.
        position: 3
        description: Description in a form of a HTML fragment converted from markdown.
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          The priority of this task. Its value must be between -1 (lowest) and 2
          (highest). Default: 0.
      status:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          The status of this task. Its value must be between 0 and 100. If 100,
          it means completed.
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        position: 4
        description: >-
          When to start this task.Note: if time is specified, the millisecond
          will be `001`. Otherwise, it is `000` (so are the hour, minute and
          second fields).
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        position: 4
        description: >-
          When to complete this task. Note: if time is specified, the
          millisecond will be 001. Otherwise, it is 000 (so are the hour, minute
          and second fields).
      recurring:
        position: 4
        description: >-
          The recurring information of this task. It is null if it is not a
          recurring task.
        $ref: '#/definitions/Recurring'
      partner:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 5
        description: >-
          OID of the external team that this task belongs to. It is null if this
          task doesn't belong to any external team.
      assignors:
        type: array
        position: 5
        description: >-
          OID of users who have assigned this tasks to a user. For example, the
          first item of assignees is assigned by the first item of assignors.
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
          - 6QMKkEPBVWETLWrXqws94ALU
      partnerBy:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 5
        description: >-
          OID of the user who assigned this task to an external team. It is null
          if this task doesn't belong to any external team.
      tags:
        type: array
        position: 5
        description: OID of tags that are tagged to this task.
        items:
          type: string
        example:
          - X6nmx9XjEO2wKbqeB1pRT43C
          - mPAQrYU1qt8wAYAInKRlTnvl
      assignees:
        type: array
        position: 5
        description: OID of users who are assigned to this task.
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
          - Job4NSW9xK6Owcke8iKj7zyH
      board:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 6
        description: >-
          OID of the board that this task was added to. It is null if this task
          doesn't belong to any board.
      order:
        type: integer
        format: int32
        example: 99
        position: 6
        description: >-
          The order of this task shown on the board. The smaller the number is,
          the ealier the task is shown. It is meaningless if it doesn't belong
          to any board.
      cover:
        type: string
        position: 8
        description: The name of the attachment that is used as a cover of this task.
      attachments:
        type: array
        position: 8
        description: The attachments of this task.
        items:
          $ref: '#/definitions/Attachment'
      childCount:
        type: integer
        format: int32
        position: 10
        description: >-
          Number of subtasks of this task. To retrieve these subtasks, make the
          GET request to "/task/list/{oid}".
      referrers:
        type: array
        position: 20
        description: >-
          A list of referrers that refer this task. Note: some of them might no
          longer exist.
        items:
          $ref: '#/definitions/Referrer'
      url:
        type: string
        example: 'https://quire.io/w/my_project/123'
        position: 50
        description: Url of this task on Quire website.
      toggledAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: When this task's state was changed last time.
      toggledBy:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 50
        description: 'OID of the user who changed this task''s state. '
      editedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: When this record was edited last time.
      peekabooAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: When this task was peekabooed. It is null if not peekabooed.
      favorites:
        type: array
        position: 60
        description: OID of users who favorite this task.
        items:
          type: string
        example:
          - Job4NSW9xK6Owcke8iKj7zyH
      followers:
        type: array
        position: 60
        description: OID of users who follow this task.
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
      project:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the project this task belongs to.
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: OID of the user who created this record.
  UpdateBoardBody:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Board 101
        description: (Optional) The name of the board.
      id:
        type: string
        example: Board101
        description: (Optional) ID of the board.
      description:
        type: string
        example: '**Great** board to start with.'
        description: (Optional) An optional description about this task.
      column:
        description: (Optional) Updates an existing column with a new content.
        $ref: '#/definitions/UpdateColumnBody'
      addColumn:
        description: (Optional) The new column defintion to be added to this board.
        $ref: '#/definitions/AddColumnBody'
      removeColumn:
        type: integer
        format: int32
        description: (Optional) The status of the column that needs to be deleted.
      archived:
        type: boolean
        example: true
        description: >-
          (Optional) Specify true to archive this board. Or, specify false to
          undo the previous archiving if any.
      due:
        type: string
        example: '2020-01-22T02:06:58.158Z'
        description: '(Optional) When this board was aimed to complete. '
  UpdateColumnBody:
    type: object
    properties:
      name:
        type: string
        example: TODO
        description: (Optional) The new name.
      color:
        type: string
        example: '35'
        description: >-
          (Optional) The color. It is an index of our predefined color palette.
          The first digit is between 0 and 5, and the second between 0 and 7.
          The color palette can be found in our Quire's color picker.
      value:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          (Optional) The new status that this column represents. Its value must
          be between 0 and 100. If 100, it means completed. There is exactly one
          column with completed status.
      target:
        type: integer
        format: int32
        example: 0
        position: 4
        description: |-
          The status of the existing column to update with the new content.
          Note: it must be specified.
  UpdateCommentBody:
    type: object
    properties:
      description:
        type: string
        example: Adjust style
        description: (Optional) The new content of the comment.
      pinned:
        type: boolean
        example: false
        description: (Optional) Whether to pin this comment.
  UpdateProjectBody:
    type: object
    properties:
      followers:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU","app"]'
        description: |-
          (Optional) OID of the users to replace the followers of this project.
          Please refer to `addFollowers()` for more details.
        items:
          type: string
      addFollowers:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU"]'
        description: >-
          (Optional) OID of the followers to be added to this project.If "me" is
          specified, it means the current user will follow this task.

          If the application would like to follow (i.e., receive notifications),
          it can pass "app" as one of OIDs.

          In additions, it can pass additional information in one of the
          following syntaxes.


          Syntax 1:

          "app|team" or "app|team|channel"

          where team and channel can be any value.


          Syntax 2:

          "app|/path"

          where "/path" can be any URL path. It will be appended to the hook's
          URL when calling the registered hook. For example, if the hook URL is
          "https://super.app/hooks/standard" and the follower is
          "app|/soc1/33456/a7", then the notification will be sent to
          "https://super.app/hooks/standard/soc1/33456/a7".
        items:
          type: string
      removeFollowers:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU"]'
        description: |-
          (Optional) OID of the followers to be removed from this project.
          Please refer to `addFollowers()` for more details.
        items:
          type: string
  UpdateTagBody:
    type: object
    properties:
      name:
        type: string
        example: Later
        description: (Optional) The new name of the tag.
      project:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: >-
          (Optional) OID of the project this tag shall be limited to. It is used
          only if "global" is also specified and false. Otherwise, it is simply
          ignored.
      global:
        type: boolean
        example: true
        description: >-
          (Optional) Whether this tag is global. If you specify false here, you
          have to specify "project" for what project you'd like to put the tag
          to.
      color:
        type: string
        description: (Optional) The color of the tag.
  UpdateTaskBody:
    type: object
    properties:
      name:
        type: string
        example: New idea
        description: (Optional) New name of the task.
      description:
        type: string
        description: (Optional) Change the description about this task.
      tags:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU"]'
        description: >-
          (Optional) OID of the tags to replace existing tags of to this task.
          If specified, it will replace any existing tag(s). Instead of
          replacment, you can use "addTags" or "removeTags".
        items:
          type: string
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        description: >-
          (Optional) An optional start time. Note: if time is specified, the
          millisecond must be `001`. Otherwise, it is `000` (so are the hour,
          minute and second fields).
      assignees:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU"]'
        description: >-
          (Optional) OID of the users that this task is assigned to. If
          specified, it will replace any existing assignee(s). Instead of
          replacment, you can use "addAssignees" or "removeAssignees".
        items:
          type: string
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        description: >-
          (Optional) An optional start time. Note: if time is specified, the
          millisecond must be `001`. Otherwise, it is `000` (so are the hour,
          minute and second fields).
      recurring:
        description: >-
          (Optional) The recurring information of this task. It is null if it is
          not a recurring task.
        $ref: '#/definitions/Recurring'
      peekaboo:
        type: boolean
        example: true
        description: >-
          (Optional) Specify true to peekaboo this task and its subtasks. Or,
          specify false to undo the previous peekaboo if any.
      followers:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU","app"]'
        description: >-
          (Optional) OID of the users to replace the followers of this task.
          Please refer to `addFollowers()` for more details.
        items:
          type: string
      addTags:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU"]'
        description: (Optional) OID of the tags to be added to this task.
        items:
          type: string
      removeTags:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU"]'
        description: (Optional) OID of the tags to be removed from this task.
        items:
          type: string
      addAssignees:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU"]'
        description: (Optional) OID of the assignees to be added to this task.
        items:
          type: string
      removeAssignees:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU"]'
        description: (Optional) OID of the assignees to be removed from this task.
        items:
          type: string
      addFollowers:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU"]'
        description: >-
          (Optional) OID of the followers to be added to this task.If "me" is
          specified, it means the current user will follow this task.

          If the application would like to follow (i.e., receive notifications),
          it can pass "app" as one of OIDs.

          In additions, it can pass additional information in one of the
          following syntaxes.


          Syntax 1:

          "app|team" or "app|team|channel"

          where team and channel can be any value.


          Syntax 2:

          "app|/path"

          where "/path" can be any URL path. It will be appended to the hook's
          URL when calling the registered hook. For example, if the hook URL is
          "https://super.app/hooks/standard" and the follower is
          "app|/soc1/33456/a7", then the notification will be sent to
          "https://super.app/hooks/standard/soc1/33456/a7".
        items:
          type: string
      removeFollowers:
        type: array
        example: '["6QMKkEPBVWETLWrXqws94ALU"]'
        description: >-
          (Optional) OID of the followers to be removed from this task.Please
          refer to `addFollowers()` for more details.
        items:
          type: string
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          (Optiona) Change the priority of this task. Its value must be between
          -1 (lowest) and 2 (highest). 
      status:
        type: integer
        format: int32
        example: 100
        position: 4
        description: >-
          (Optiona) An optional status to change to. Its value must be between 0
          and 100. To complete a task, specify 100.
  User:
    type: object
    properties:
      email:
        type: string
        example: john@gmail.cc
        description: Email address.
        allowEmptyValue: true
      website:
        type: string
        example: 'https://coolwebsites.com'
        description: Website.
        allowEmptyValue: true
      id:
        type: string
        example: My_ID
        description: ID.
      url:
        type: string
        example: 'https://quire.io/w/my_project'
        description: Url of this record on Quire website.
      description:
        type: string
        example: This is *cool*!
        description: Description.
      nameText:
        type: string
        example: My Name
        description: Name but excluding markdown characters.
      nameHtml:
        type: string
        example: My Name
        description: Name in a form of a HTML fragment converted from markdown.
      descriptionText:
        type: string
        example: This is cool!
        description: Description but excluding markdown characters.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description in a form of a HTML fragment converted from markdown.
      iconColor:
        type: string
        example: '37'
        description: >-
          The color of the icon representing this record. It is an index of our
          predefined color palette. 
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        description: The image representing this record.
        allowEmptyValue: true
      name:
        type: string
        example: My Name
        description: Name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
